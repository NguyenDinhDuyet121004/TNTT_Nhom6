# -*- coding: utf-8 -*-
"""BTL.TNTT

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Unk2Tfy3Ve02w6BZRPn9dcCjLffniGml
"""

# Commented out IPython magic to ensure Python compatibility.
# %cd /content

!mkdir datasets

from google.colab import drive

drive.mount('/content/datasets')
#kết nối với GG drive

! pip install tensorflow

import numpy as np
import pandas as pd
from numpy import *
import os
import matplotlib.pyplot as plt
from keras.models import Sequential
from tensorflow.keras import optimizers
import tensorflow as tf
from keras.layers import Conv2D, BatchNormalization, Activation, MaxPooling2D, Dropout, Dense, Flatten
from PIL import Image
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from keras import layers, models, optimizers

base_dir = '/content/datasets/MyDrive/Data'
train_dir = os.path.join(base_dir, 'train')
val_dir = os.path.join(base_dir, 'val')
test_dir = os.path.join(base_dir, 'test')

import random
# Lấy danh sách tất cả các tệp tin trong thư mục 'BatThuong'
all_images = os.listdir(os.path.join(train_dir, 'BatThuong'))
# Chọn ngẫu nhiên một tên tệp tin
random_image_name = random.choice(all_images)
# Tạo đường dẫn đầy đủ đến ảnh ngẫu nhiên
random_image_path = os.path.join(train_dir, 'BatThuong', random_image_name)
# Đọc và hiển thị hình ảnh
imagen = plt.imread(random_image_path)
plt.imshow(imagen)
plt.show()
#kiểm tra xem một hình ảnh từ tập dữ liệu đào tạo có được đọc và hiển thị đúng không.
#Điều này có thể hữu ích trong quá trình kiểm tra và kiểm định dữ liệu,
#đồng thời đảm bảo rằng quá trình đọc và xử lý hình ảnh diễn ra đúng cách

train_datagen = ImageDataGenerator(rescale=1./255,#Chuẩn hóa giá trị pixel về khoảng [0, 1].
                                                  #Điều này giúp mô hình học được ổn định hơn và tăng tốc quá trình đào tạo
                                   rotation_range=40,   #  Áp dụng quay ngẫu nhiên cho ảnh trong khoảng ±40 độ.
                                                        #  Giúp mô hình học được tính không gian và invariance với phép quay.
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,#  Dịch ngẫu nhiên ảnh theo chiều rộng và chiều cao.
                                                          #  Điều này giúp mô hình học được tính vị trí không gian và tăng tính động của dữ liệu đào tạo.
                                   shear_range=0.2,#Áp dụng cắt ngẫu nhiên cho ảnh. Giúp mô hình học được tính biến đổi hình dạng.
                                   zoom_range=0.2,#Áp dụng phóng to hoặc thu nhỏ ngẫu nhiên cho ảnh. Giúp mô hình học được tính tỷ lệ và tăng độ phong phú của dữ liệu.
                                   horizontal_flip=True,#Lật ngẫu nhiên ảnh theo chiều ngang. Giúp mô hình học được tính đối xứng và tăng sự đa dạng của dữ liệu.
                                   fill_mode='nearest'# Phương thức điền giá trị cho các ô trống sau khi thực hiện các biến đổi.
                                                      #"nearest" sẽ điền giá trị bằng giá trị gần nhất, giúp giảm thiểu hiệu ứng hạt giọt khi thực hiện biến đổi.
                                   )
test_datagen = ImageDataGenerator(rescale=1./255)
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),#kích thước ảnh đầu vào để đảm bảo các ảnh đầu vào cùng kích thước.
    batch_size=20,
    class_mode='binary'#kiểu của lớp: nhị phân => có 2 lớp.
)
test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(224, 224),
    batch_size=20,
    class_mode='binary'
)

def create_model(input_shape , num_class):
    model = Sequential();#layers sẽ được thêm vào theo thứ tự tuần tự.
    model.add(Conv2D(32, (3, 3), activation='relu', input_shape= input_shape))#lớp tích chập
    model.add(MaxPooling2D((2, 2)))#lớp maxpooling
    model.add(Conv2D(64, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Conv2D(128, (3, 3), activation='relu'))
    model.add(MaxPooling2D((2, 2)))
    model.add(Flatten())#Chuyển đổi các feature maps thành một vector 1D để đưa vào các layer fully connected.
    model.add(Dropout(0.2))#Áp dụng dropout để ngẫu nhiên "tắt" một số đơn vị nơ-ron trong quá trình đào tạo, giúp ngăn chặn hiện tượng overfitting.
    model.add(Dense(512, activation='relu'))#học các đặc trưng tổng hợp từ các đặc trưng đã được học ở các lớp convolutional hoặc pooling.
    model.add(Dense(num_class, activation='softmax'))
    return model

input_shape = (224, 224, 3)#đầu vào của ảnh: kích thước 224x224 và có 3 kênh màu RGB
num_class = 2 #là số lớp đầu ra của mô hình( bình thường hay bất thường )

model = create_model(input_shape, num_class)
model.summary()

model.compile(optimizer='adam',
              loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])
history = model.fit(train_generator,
                    steps_per_epoch=30,
                    epochs=50)

test_loss, test_acc = model.evaluate(test_generator, steps=len(test_generator))
print('test acc:', test_acc)

import os
os.makedirs("model", exist_ok=True)
model.save("model/modelBTL.keras")

model = tf.keras.models.load_model('/content/model/modelBTL.keras')

from google.colab import files
uploaded = files.upload()

from PIL import Image
import numpy as np
from google.colab.patches import cv2_imshow
import cv2
image_path = '/content/datasets/MyDrive/Data/test/BatThuong/4e4b1ec5-50e1-4026-b97b-0c75e332e592.png'
img = cv2.imread(image_path)
cv2_imshow(img)
image = Image.open(image_path).resize((224, 224))
# Chuyển đổi hình ảnh thành mảng numpy và chuẩn hóa giá trị pixel
image_array = np.array(image) / 255.0
# Giữ lại chỉ 3 kênh đầu tiên
image_array = image_array[:, :, :3]
# Reshape hình ảnh thành (1, 224, 224, 3)
image_array = np.expand_dims(image_array, axis=0)
# Dự đoán
pred = model.predict(image_array)
if( np.argmax(pred) == 1):
  print('Bình thường')
else:
  print('Bất thường')

!zip -r model.zip /content/model